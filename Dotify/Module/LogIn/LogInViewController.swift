//
//  LogInViewController.swift
//  Dotify
//
//  Created Lucas Pham on 7/12/19.
//  Copyright © 2019 Vinova. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit

class LogInViewController: UIViewController, LogInViewProtocol, UIGestureRecognizerDelegate, UITextFieldDelegate {
    //MARK: Outlet
    @IBOutlet weak var backgroundImageView: UIImageView!
    @IBOutlet weak var usernameTextField: UITextField!
    @IBOutlet weak var passwordTextField: UITextField!
    
    var presenter: LogInPresenterProtocol?

    //MARK: Attribute
    var user: User?
    
	override func viewDidLoad() {
        super.viewDidLoad()
        self.navigationController?.interactivePopGestureRecognizer?.delegate = self
        passwordTextField.delegate = self
        let backgroundTapGes = UITapGestureRecognizer(target: self, action: #selector(dismisKeyboard))
        backgroundImageView.addGestureRecognizer(backgroundTapGes)
    }
    override func viewWillAppear(_ animated: Bool) {
        setUpNavigationBar()
    }
    //MARK: Set up view
    func setUpNavigationBar(){
        let navigationBar = self.navigationController?.navigationBar
        navigationBar!.isHidden = false
        
        //Center view
        let imageTitle = UIImageView(image: #imageLiteral(resourceName: "icon"))
        imageTitle.frame  = CGRect(x: 0, y: 0, width: 90, height: 30)
        imageTitle.widthAnchor.constraint(equalToConstant: 90).isActive = true
        imageTitle.heightAnchor.constraint(equalToConstant: 30).isActive = true
        
        //Left button
        let leftButton = UIBarButtonItem(image: #imageLiteral(resourceName: "Back Chevron").withRenderingMode(.alwaysOriginal), style: .plain, target: self, action: #selector(popVC))
        
        
        navigationItem.titleView = imageTitle
        navigationItem.leftBarButtonItem = leftButton
        
    }
    
    func textFieldShouldReturn(_ textField: UITextField) -> Bool {
        let username = usernameTextField.text ?? ""
        let password = passwordTextField.text ?? ""
        if username.isEmpty && password.isEmpty { return false }
        logIn(username: username, password: password)
        return true
    }
    
    //MARK: Action
    @IBAction func didTapLogIn(_ sender: Any) {
        let username = usernameTextField.text ?? ""
        let password = passwordTextField.text ?? ""
        if username.isEmpty && password.isEmpty { return }
        logIn(username: username, password: password)
    }
    
    func logIn(username: String, password: String){
        let curUser = User(JSON: ["username": username, "password": password])
        
        presenter?.logIn(curUser: curUser!, completion: { (isSuccess, error) in
            guard error == nil else {
                fatalError(error!.localizedDescription)
            }
            if isSuccess! {
                let mainVC = MiniPlayerRouter.createModule()
                let browseVC = BrowseViewController()
                browseVC.parentVC = mainVC
                mainVC.rootViewController = UINavigationController(rootViewController: browseVC)
                self.navigationController?.present(mainVC, animated: true, completion: nil)
            }
            else {
                let alertVC = UIAlertController(title: "Log in failed", message: "Invalid username or password", preferredStyle: .alert)
                alertVC.addAction(UIAlertAction(title: "OK", style: .default, handler: nil))
                self.present(alertVC, animated: true, completion: nil)
            }
        })
    }
    
    @objc func popVC(){
        self.navigationController?.popViewController(animated: true)
    }
    @objc func dismisKeyboard(){
        view.endEditing(true)
    }
}
