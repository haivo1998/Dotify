//
//  MiniPlayerPresenter.swift
//  Dotify
//
//  Created Lucas Pham on 7/15/19.
//  Copyright © 2019 Vinova. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit

class MiniPlayerPresenter: MiniPlayerPresenterProtocol {
    var song: Song?
    
    func getSongContent(listID: [String], indexPlaying: Int, _ completionData: @escaping (_ song: Song) -> () ,_ completion: @escaping (URL, Error?) -> Void) {
        interactor?.loadSong(id: listID[indexPlaying], { (song, error) in
            guard error == nil else { fatalError(error!.localizedDescription) }
            self.song = song
            self.interactor?.loadFavMusic(of: self.curUserID, { (listSongID, error) in
                guard error == nil else { fatalError("Load music error") }
                
                //Check if song is favorited
                var found = false
                listSongID?.forEach({ (id) in
                    found = id == AudioPlaying.ins.currentIDSong() ? true : found
                })
                AudioPlaying.ins.isFavMark = found
                
                //Fill artist of song instance
                self.interactor?.loadArtist(id: self.song!.idArtist!, { (artist, error) in
                    guard error == nil else { fatalError(error!.localizedDescription) }
                    self.song?.artist = artist
                    completionData(self.song!)
                    self.interactor?.fetchMusic(from: SongDataURL.instance.getSongFileURL(filename: self.song!.fileName!), { (url, error) in
                        completion(url, error)
                    })
                })
            })
        })
    }
    func writeListSong(ids: [String]) {
        interactor?.writeSongPlaying(listID: ids)
    }
    weak private var view: MiniPlayerViewProtocol?
    var interactor: MiniPlayerInteractorProtocol?
    private let router: MiniPlayerWireframeProtocol
    var curUserID = ""

    init(interface: MiniPlayerViewProtocol, interactor: MiniPlayerInteractorProtocol?, router: MiniPlayerWireframeProtocol) {
        self.view = interface
        self.interactor = interactor
        self.router = router
        self.curUserID = UserDefaults.standard.string(forKey: "user_id") ?? ""
    }

}
