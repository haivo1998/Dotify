//
//  MiniPlayerInteractor.swift
//  Dotify
//
//  Created Lucas Pham on 7/15/19.
//  Copyright © 2019 Vinova. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit
import FirebaseStorage
import Alamofire

class MiniPlayerInteractor: MiniPlayerInteractorProtocol {
    var artist: Artist?
    var storage = Storage.storage()
    
    func loadSong(id: String, _ completing: @escaping (Song, Error?) -> Void) {
        AF.request(SongDataURL.instance.getSongJson(id: id)).responseJSON { (response) in
            guard response.error == nil else { return }
            guard let data = response.value as? [ String: Any ] else { return }
            let song = Song.init(JSON: data)
            completing(song!, nil)
        }
    }
    func loadArtist(id: String, _ completing: @escaping (Artist, Error?) -> Void) {
        AF.request(ArtistDataURL.instance.getArtistJson(id: id)).responseJSON { (response) in
            guard response.error == nil else { return }
            guard let data = response.value as? [ String: Any ] else { return }
            let artist = Artist.init(JSON: data)
            completing(artist!, nil)
        }
    }
    func fetchMusic(from url: String, _ completion: @escaping (URL, Error?) -> Void) {
        let storageRef = Storage.storage().reference(forURL: url)
        storageRef.downloadURL { (url, error) in
            completion(url!, error)
        }
    }
    func loadFavMusic(of userId: String, _ complettion: @escaping ( [String]?, Error? ) -> Void ){
        var favSongs: [String] = []
        AF.request(RelUserSongDataURL.instance.getAllRelUserSongJson()).responseJSON { (response) in
            guard response.error == nil else { fatalError("Can't get data") }
            let data = response.value as? [String: Any]
            data?.forEach({ (key, value) in
                let relation = value as? [String: String]
                let _userID = relation!["user_id"]
                let _songID = relation!["song_id"]
                favSongs += userId == _userID ? [_songID!] : []
            })
            complettion(favSongs, nil)
        }
    }
    func writeSongPlaying(listID: [String]) {
        do{
            var ids = try JSONEncoder().encode(listID)
            UserDefaults.standard.set(ids, forKey: "list_song_id")
        } catch {
            print(error.localizedDescription)
        }
    }

    weak var presenter: MiniPlayerPresenterProtocol?
}
