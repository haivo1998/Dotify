//
//  AudioPlayerPresenter.swift
//  Dotify
//
//  Created Lucas Pham on 7/10/19.
//  Copyright © 2019 Vinova. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit
import AVFoundation
import FirebaseDatabase

class AudioPlayerPresenter: AudioPlayerPresenterProtocol {
    

    weak private var view: AudioPlayerViewProtocol?
    var interactor: AudioPlayerInteractorProtocol?
    private let router: AudioPlayerWireframeProtocol

    var song: Song?
    var database = Database.database().reference()
    
    init(interface: AudioPlayerViewProtocol, interactor: AudioPlayerInteractorProtocol?, router: AudioPlayerWireframeProtocol) {
        self.view = interface
        self.interactor = interactor
        self.router = router
    }
    func getSongFileURL(listID: [String], indexPlaying: Int, _ completionData: @escaping (_ song: Song) -> () ,_ completion: @escaping (URL, Error?) -> Void) {
        interactor?.loadSong(id: listID[indexPlaying], { (song, error) in
            guard error == nil else { fatalError(error!.localizedDescription) }
            self.song = song
            self.interactor?.loadArtist(id: self.song!.idArtist!, { (artist, error) in
                guard error == nil else { fatalError(error!.localizedDescription) }
                self.song?.artistName = artist.name
                completionData(self.song!)
                self.interactor?.fetchMusic(from: SongDataURL.instance.getSongFileURL(filename: self.song!.fileName!), { (url, error) in
                    completion(url, error)
                })
            })
        })
    }
    
    func convertSecondToTime(durationBySecond: Int, negative: Bool?) -> String {
        let min = Int(durationBySecond) / 60
        let second = Int(durationBySecond) % 60
        return (negative! ? "-" : "") + (min >= 10 ? String(min) : ("0" + String(min))) + ":" + (second >= 10 ? String(second) : ("0" + String(second)))
    }
    func shuffleListMusic(listID: [String], curIndex: Int) -> [String] {
        let leftListID = listID[0..<curIndex]
        let rightListID = listID[(curIndex + 1)..<(listID.count)]
        
        return leftListID.shuffled() + [listID[curIndex]] + rightListID.shuffled()
    }
    
    func removeFav(songID: String, _ completion: @escaping (Error?) -> Void) {
        let curUserID = UserDefaults.standard.string(forKey: "user_id") ?? ""
        interactor?.loadKeyFav(userID: curUserID, songID: songID, { (key, error) in
            guard error == nil else { fatalError("Error while load data") }
            //delete key
            guard key != nil else { return }
            self.database.child("relUserSong").child(key!).setValue(nil, withCompletionBlock: { (error, ref) in
                completion(error)
            })
        })
    }
    
    func addFav(songID: String, _ completion: @escaping (Error?) -> Void) {
        let curUserID = UserDefaults.standard.string(forKey: "user_id") ?? ""
        interactor?.loadKeyFav(userID: curUserID, songID: songID, { (key, error) in
            guard error == nil else { fatalError("Error while load data") }
            //delete key
            guard key == nil else { return }
            self.database.child("relUserSong").childByAutoId().setValue(["user_id": curUserID, "song_id": songID], withCompletionBlock: { (error, ref) in
                completion(error)
            })
        })
    }
    
}
