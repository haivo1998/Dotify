//
//  AudioPlayerViewController.swift
//  Dotify
//
//  Created Lucas Pham on 7/10/19.
//  Copyright © 2019 Vinova. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit
import FirebaseStorage
import AVFoundation
import SDWebImage
import MediaPlayer

class AudioPlayerViewController: UIViewController, AudioPlayerViewProtocol {

    @IBOutlet weak var sdfs: NSLayoutConstraint!
    //MARK: Outlet
    @IBOutlet weak var nameMusicLabel: UILabel!
    @IBOutlet weak var nameArtistLabel: UILabel!
    @IBOutlet weak var musicSlider: UISlider!
    @IBOutlet weak var thumbImageView: UIImageView!
    @IBOutlet weak var playButton: UIButton!
    @IBOutlet weak var rewindButton: UIButton!
    @IBOutlet weak var forwardButton: UIButton!
    @IBOutlet weak var shuffleButton: UIButton!
    @IBOutlet weak var repeatButton: UIButton!
    @IBOutlet weak var favoriteButton: UIButton!
    @IBOutlet weak var moreInfoButton: UIButton!
    @IBOutlet weak var dismissButton: UIButton!
    @IBOutlet weak var infoMusicButton: UIButton!
    @IBOutlet weak var playedTimeLabel: UILabel!
    @IBOutlet weak var remainTimeLabel: UILabel!
    @IBOutlet weak var bottomActionView: NSLayoutConstraint!
    @IBOutlet weak var actionView: ActionView!
    @IBOutlet weak var heightActionView: NSLayoutConstraint!
    @IBOutlet weak var blackView: UIView!
    
    //MARK: Properties
    var mainVC: MiniPlayerViewController?
    //State
    var isDragging = false
    //Song
    var durationBySecond: Float64 = 0
    var storage = Storage.storage()
    //Other
    var defaultTimeText = "--:--"
	var presenter: AudioPlayerPresenterProtocol?
    
    let _heightActionView: CGFloat = 150

	override func viewDidLoad() {
        super.viewDidLoad()
        blackView.backgroundColor = UIColor(white: 0, alpha: 0.5)
        heightActionView.constant = _heightActionView
        actionView.parentVC = self
        AudioPlaying.ins.isPlayerLoaded = true
        setUpView()
        Timer.scheduledTimer(timeInterval: 0.5, target: self, selector: #selector(updateRealTime), userInfo: nil, repeats: true)
        
        NotificationCenter.default.addObserver(self, selector: #selector(playerDidPlayEnd), name: .AVPlayerItemDidPlayToEndTime, object: AudioPlaying.ins.player.currentItem)
    }
    override func viewWillAppear(_ animated: Bool) {
        self.navigationController?.navigationBar.isHidden = true
        bottomActionView.constant = _heightActionView
        setUpMusicInfo()
        setUpSliderTimeLabel()
        updateViewWhenTogglePlay()
        DispatchQueue.main.asyncAfter(deadline: .now() + 0.2) {
            self.actionView.layer.cornerRadius = 10
            self.actionView.layer.masksToBounds = true
        }
    }
    //MARK: Setup view
    func setUpView() {
        playedTimeLabel.text = defaultTimeText
        remainTimeLabel.text = defaultTimeText
        rewindButton.setImage(#imageLiteral(resourceName: "rewind"), for: .normal)
        forwardButton.setImage(#imageLiteral(resourceName: "fastforward"), for: .normal)
        shuffleButton.setImage(#imageLiteral(resourceName: "shuffle"), for: .normal)
        shuffleButton.layer.borderWidth = 1
        shuffleButton.layer.borderColor = #colorLiteral(red: 0.1490196078, green: 0.1490196078, blue: 0.1490196078, alpha: 1)
        repeatButton.setImage(#imageLiteral(resourceName: "repeat"), for: .normal)
        dismissButton.setImage(#imageLiteral(resourceName: "dismiss"), for: .normal)
        infoMusicButton.setImage(#imageLiteral(resourceName: "musicInfo"), for: .normal)
        favoriteButton.setImage(#imageLiteral(resourceName: "favorite"), for: .normal)
        moreInfoButton.setImage(#imageLiteral(resourceName: "moreInfo"), for: .normal)
    }
    func setUpMusicInfo(){
        let song = AudioPlaying.ins.song ?? Song()
        nameMusicLabel.text = song.name
        nameArtistLabel.text = song.artist?.name!
        if let url = song.imageUrl{
            thumbImageView.sd_setImage(with: URL(string: url), completed: nil)
        }
    }

    func setUpSliderTimeLabel() {
        guard let duration = AudioPlaying.ins.player.currentItem?.asset.duration else {
            return
        }
        self.durationBySecond = CMTimeGetSeconds(duration)
        self.musicSlider.maximumValue = Float(durationBySecond)
    }
    func updateViewWhenTogglePlay(){
        updateFavoriteButton()
        let isPlaying = AudioPlaying.ins.isPlaying
        let heightImageSlider = isPlaying ? 25 : 11
        let imageSlider = UIImage(named: isPlaying ? "sliderOndrag" : "sliderUndrag")?.scaleToSize(newSize: CGSize(width: heightImageSlider, height: heightImageSlider))
        musicSlider.setThumbImage(imageSlider, for: .normal)
        playButton.setImage(isPlaying ? #imageLiteral(resourceName: "pause") : #imageLiteral(resourceName: "play"), for: .normal)
    }
    func updateSongTimeViaSlider(){
        let currentTime = self.musicSlider.value
        let player = AudioPlaying.ins.player
        AudioPlaying.ins.seekToTime(second: Double(currentTime))
    }
    func updateRepeatButton(){
        let state = AudioPlaying.ins.repeatState
        var tintColor = UIColor(hex: Constants.DEFAULT_DARK_COLOR)
        switch state {
        case .OFF:
            tintColor = UIColor(hex: Constants.DEFAULT_DARK_COLOR)
        case .ALL_LIST:
            tintColor = UIColor(hex: Constants.DEFAULT_COLOR)
        case .ONE:
            tintColor = #colorLiteral(red: 0.3411764801, green: 0.6235294342, blue: 0.1686274558, alpha: 1)
        }
        repeatButton.tintColor = tintColor!
    }
    func updateShuffleButton(){
        var tintColor = UIColor(hex: Constants.DEFAULT_DARK_COLOR)
        switch AudioPlaying.ins.shuffleState {
        case .ON:
            tintColor = UIColor(hex: Constants.DEFAULT_COLOR)
        case .OFF:
            tintColor = UIColor(hex: Constants.DEFAULT_DARK_COLOR)
        }
        shuffleButton.tintColor = tintColor
        shuffleButton.layer.borderColor = tintColor?.cgColor
    }
    func updateFavoriteButton(){
        let isFav = AudioPlaying.ins.isFavMark
        favoriteButton.setImage(isFav ? #imageLiteral(resourceName: "favorite_song_btn").withRenderingMode(.alwaysOriginal) : #imageLiteral(resourceName: "favorite"), for: .normal)
    }
    //MARK: Control music
    func playMusic() {
        AudioPlaying.ins.playPlayer()
        updateViewWhenTogglePlay()
    }
    func pauseMusic() {
        
        AudioPlaying.ins.pausePlayer()
        updateViewWhenTogglePlay()
    }
    func setRepeat(state: RepeatState){
        AudioPlaying.ins.setRepeatState(state)
        updateRepeatButton()
    }
    func setShuffleListID(state: ShuffleState) {
        if state == .ON{
            AudioPlaying.ins.listID = (presenter?.shuffleListMusic(listID: AudioPlaying.ins.originListID, curIndex: AudioPlaying.ins.indexPlaying))!
        } else {
            AudioPlaying.ins.setShuffleState(.OFF)
            AudioPlaying.ins.listID = AudioPlaying.ins.originListID
        }
        AudioPlaying.ins.setShuffleState(state)
        updateShuffleButton()
    }
    //MARK: Action
    @IBAction func onClickPlayButton(_ sender: Any) {
        if mainVC == nil { return }
        if AudioPlaying.ins.isEndOfListID() {
            AudioPlaying.ins.seekToTime(second: 0)
            playMusic()
        }
        if AudioPlaying.ins.isPlaying {
            pauseMusic()
        } else {
            playMusic()
        }
    }
    @IBAction func onTouchInfoMusic(_ sender: Any) {
    }
    
    @IBAction func didTouchUpInsideSlider(_ sender: Any) {
        isDragging = false
        updateSongTimeViaSlider()
    }
    @IBAction func didTouchUpOutsideSlider(_ sender: Any) {
        isDragging = false
        updateSongTimeViaSlider()
    }
    @IBAction func areDraggingSlider(_ sender: Any) {
        isDragging = true
    }
    
    @IBAction func dismissScreen(_ sender: Any) {
        self.dismiss(animated: true, completion: nil)
    }
    @IBAction func goToPreMusic(_ sender: Any) {
        if mainVC == nil { return }
        let currentTimeBySecond = CMTimeGetSeconds((AudioPlaying.ins.player.currentTime()))
        if currentTimeBySecond > 2 {
            AudioPlaying.ins.seekToTime(second: 0)
        } else if AudioPlaying.ins.indexPlaying == 0 {
            return
        } else {
            mainVC?.goToMusic(next: false)
        }
    }
    @IBAction func goToNextMusic(_ sender: Any) {
        if AudioPlaying.ins.indexPlaying == AudioPlaying.ins.listID.count - 1 || mainVC == nil { return }
        mainVC!.goToMusic(next: true)
    }
    
    @IBAction func didTapRepeat(_ sender: Any) {
        var state: RepeatState = .OFF
        switch AudioPlaying.ins.repeatState {
        case .OFF:
            state = .ALL_LIST
        case .ALL_LIST:
            state = .ONE
        case .ONE:
            state = .OFF
        }
        setRepeat(state: state)
    }
    @IBAction func didTapShuffle(_ sender: Any) {
        var state: ShuffleState = .OFF
        switch AudioPlaying.ins.shuffleState {
        case .ON:
            state = .OFF
        case .OFF:
            state = .ON
        }
        setShuffleListID(state: state)
    }
    @IBAction func didTapFavoriteButton(_ sender: Any) {
        guard let curIDSong = AudioPlaying.ins.currentIDSong() else { return }
        favoriteButton.isEnabled = false
        if AudioPlaying.ins.isFavMark {
            presenter?.removeFav(songID: curIDSong, { (error) in
                self.favoriteButton.isEnabled = true
                guard error == nil else {
                    presentAlertVC(target: self, title: "Error", message: "Error while set favorite", nil)
                    return
                }
                AudioPlaying.ins.isFavMark = false
                self.updateFavoriteButton()
            })
        } else {
            presenter?.addFav(songID: curIDSong, { (error) in
                self.favoriteButton.isEnabled = true
                guard error == nil else {
                    presentAlertVC(target: self, title: "Error", message: "Error while set favorite", nil)
                    return
                }
                AudioPlaying.ins.isFavMark = true
                self.updateFavoriteButton()
            })
        }
    }
    
    @IBAction func didTapActionButton(_ sender: Any) {
//        guard let windows = UIApplication.shared.keyWindow else { return }
        blackView.addGestureRecognizer(UITapGestureRecognizer(target: self, action: #selector(dismisBlackView)))
        
        self.blackView.alpha = 1
        self.actionView.isHidden = false
        self.blackView.isHidden = false
        UIView.animate(withDuration: 0.2) {
            self.blackView.alpha = 1
            self.bottomActionView.constant = 0
            self.view.layoutIfNeeded()
        }
    }
    //MARK: Selector func
    @objc func dismisBlackView(){
        UIView.animate(withDuration: 0.2) {
            self.blackView.alpha = 0
            self.bottomActionView.constant = self._heightActionView
            self.view.layoutIfNeeded()
        }
        DispatchQueue.main.asyncAfter(deadline: .now() + 0.2) {
            self.actionView.isHidden = true
            self.blackView.isHidden = true
        }
        
    }
    
    @objc func updateRealTime(){
        if AudioPlaying.ins.player.status == .readyToPlay {
            //Setup 2 label
            let currentTimeBySecond = CMTimeGetSeconds((AudioPlaying.ins.player.currentTime()))
            playedTimeLabel.text = presenter!.convertSecondToTime(durationBySecond: Int(currentTimeBySecond), negative: false)
            
            let duration = CMTimeGetSeconds(((AudioPlaying.ins.player.currentItem?.asset.duration)!))
            let remainingTime = duration - currentTimeBySecond
            remainTimeLabel.text = presenter!.convertSecondToTime(durationBySecond: Int(remainingTime), negative: true)
            
            //Setup slider
            if isDragging { return }
            musicSlider.value = Float(currentTimeBySecond)
            
            
            
            var nowPlayingInfo = [String: Any]()
            nowPlayingInfo[MPMediaItemPropertyTitle] = AudioPlaying.ins.song?.name ?? ""
        }
    }
    @objc func playerDidPlayEnd(){
        updateViewWhenTogglePlay()
//        musicSlider.value = 0
    }
}

enum RepeatState: Int {
    case OFF, ALL_LIST, ONE
}
enum ShuffleState: Int {
    case OFF, ON
}

func presentAlertVC(target: UIViewController, title: String, message: String, _ complettion: (() -> Void)? ) {
    let alertVC = UIAlertController(title: title, message: message, preferredStyle: .alert)
    alertVC.addAction(UIAlertAction(title: "OK", style: .default, handler: nil))
    target.present(alertVC, animated: true, completion: complettion)
}
