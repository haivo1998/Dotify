//
//  AudioPlayerInteractor.swift
//  Dotify
//
//  Created Lucas Pham on 7/10/19.
//  Copyright © 2019 Vinova. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit
import Alamofire
import FirebaseStorage
import FirebaseDatabase

class AudioPlayerInteractor: AudioPlayerInteractorProtocol {
    
    weak var presenter: AudioPlayerPresenterProtocol?
    var artist: Artist?
    var storage = Storage.storage()
    var database = Database.database()
    
    func removeFavSong(with id: String, _ completing: @escaping (Error?) -> Void ){
//        let ref = database.reference(withPath: '/ref')
    }
    
    func loadSong(id: String, _ completing: @escaping (Song, Error?) -> Void) {
        AF.request(SongDataURL.instance.getSongJson(id: id)).responseJSON { (response) in
            guard response.error == nil else { return }
            guard let data = response.value as? [ String: Any ] else { return }
            let song = Song.init(JSON: data)
            completing(song!, nil)
        }
    }
    func loadArtist(id: String, _ completing: @escaping (Artist, Error?) -> Void) {
        AF.request(ArtistDataURL.instance.getArtistJson(id: id)).responseJSON { (response) in
            guard response.error == nil else { return }
            guard let data = response.value as? [ String: Any ] else { return }
            let artist = Artist.init(JSON: data)
            completing(artist!, nil)
        }
    }
    func fetchMusic(from url: String, _ completion: @escaping (URL, Error?) -> Void) {
        let storageRef = Storage.storage().reference(forURL: url)
        storageRef.downloadURL { (url, error) in
            completion(url!, error)
        }
    }
    func loadKeyFav(userID: String, songID: String, _ completion: @escaping (String?, Error?) -> Void ) {
        AF.request(RelUserSongDataURL.instance.getAllRelUserSongJson()).responseJSON { (response) in
            guard response.error == nil else {
                completion(nil, response.error)
                return
            }
            let data = response.value as? [String: Any]
            data?.forEach({ (key, value) in
                let relation = value as? [String: String]
                let _userID = relation!["user_id"]
                let _songID = relation!["song_id"]
                if userID == _userID && songID == _songID { completion( key, nil) }
            })
            completion(nil, nil)
        }
    }
}
