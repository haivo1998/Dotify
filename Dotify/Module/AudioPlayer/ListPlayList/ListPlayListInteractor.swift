//
//  ListPlayListInteractor.swift
//  Dotify
//
//  Created Lucas Pham on 7/19/19.
//  Copyright © 2019 Vinova. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit
import Alamofire

class ListPlayListInteractor: ListPlayListInteractorProtocol {

    weak var presenter: ListPlayListPresenterProtocol?
    func loadPlaylist(of userID: String, _ completion: @escaping ([Playlist]?, Error?) -> Void ) {
        var playlists: [Playlist] = []
        AF.request(PlaylistDataURL.instance.getAllPlaylistJson()).responseJSON { (response) in
            guard response.error == nil else {
                completion(nil, response.error)
                return
            }
            guard let data = response.value as? [String: Any] else { fatalError("Fail to cast data") }
            data.forEach({ (key, value) in
                if let playlistDict = value as? [String: Any] {
                    let playlist = Playlist.init(JSON: playlistDict)
                    playlist?.id = key
                    playlists += playlist?.userId == userID ? [playlist!] : []
                }
            })
            completion(playlists, nil)
        }
    }
    func addPlaylist(title: String, _ completion: @escaping (Error?) -> Void){
        var playlist = Playlist()
        playlist.name = title
        playlist.dateCreatedString = convertDateToStr(Date())
        playlist.userId = UserDefaults.standard.string(forKey: "user_id")
        PlaylistFirebase.instance.addPlaylist(playlist: playlist) { (error, rel) in
            completion(error)
        }
    }
    func removePlaylist(id: String, _ completion: @escaping (Error?) -> Void) {
        PlaylistFirebase.instance.removePlaylist(id: id) { (error, ref) in
            completion(error)
        }
    }
    func loadSongIds(of playlistID: String, _ completion: @escaping ([String]?, Error?) -> Void ){
        var songIDs: [String] = []
        AF.request(RelPlaylistSongDataURL.instance.getAllRelPlaylistSongJson()).responseJSON { (response) in
            guard response.error == nil else {
                completion(nil, response.error)
                return
            }
            guard let data = response.value as? [String: Any] else { fatalError("Fail to cast data") }
            data.forEach({ (key, value) in
                if let rel = value as? [String: Any] {
                    let _playlistID = rel["playlist_id"] as? String
                    let _songID = rel["song_id"] as? String
                    songIDs += _playlistID == playlistID ? [_songID!] : []
                }
            })
            completion(songIDs, nil)
        }
    }
    
    func addSongToPlaylist(songId: String, playlistId: String, _ completion: @escaping (Error?, String) -> Void ) {
        PlaylistFirebase.instance.addSongToPlaylist(songID: songId, playlistID: playlistId) { (error, ref) in
            completion(error, ref.key ?? "")
        }
    }
    
    func removeSongFromPlaylist(songId: String, playlistId: String, _ completion: @escaping (Error?, String) -> Void ) {
        PlaylistFirebase.instance.removeSongFromPlaylist(songID: songId, playlistID: playlistId) { (error, ref) in
            completion(error, ref.key!)
        }
    }
}
