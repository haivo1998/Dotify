//
//  ListPlayListViewController.swift
//  Dotify
//
//  Created Lucas Pham on 7/19/19.
//  Copyright © 2019 Vinova. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit

class ListPlayListViewController: UIViewController, ListPlayListViewProtocol {

    @IBOutlet weak var playListTableView: UITableView!
    
    var presenter: ListPlayListPresenterProtocol?
    var playlists: [Playlist] = []
    let cellID = "PlayListCell"
    let createPlaylistCellId = "CreatePlaylistCell"
    let isAdded = false
    var songId: String?
    var customSong = false
    
    func addSong(songId: String){
        self.songId = songId
        self.customSong = true
    }
    
	override func viewDidLoad() {
        super.viewDidLoad()
        
        //Register cell
        let cellNibFile = UINib(nibName: "PlayListCell", bundle: nil)
        playListTableView.register(cellNibFile, forCellReuseIdentifier: cellID)
        
        let createPlaylistNibFile = UINib(nibName: "CreatePlaylistCell", bundle: nil)
        playListTableView.register(createPlaylistNibFile, forCellReuseIdentifier: createPlaylistCellId)
        
        playListTableView.dataSource = self
        playListTableView.delegate  = self
        
    }
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        self.navigationController?.navigationBar.isHidden = false
        presenter?.loadPlaylists({ (playlists, error) in
            guard error == nil else  {
                presentAlertVC(target: self, title: "Error", message: error?.localizedDescription ?? "Unknown error", nil)
                return
            }
            self.playlists = playlists ?? []
            self.playListTableView.reloadData()
        })
    }
    
    override func viewWillDisappear(_ animated: Bool) {
        super.viewDidDisappear(true)
        self.navigationController?.navigationBar.isHidden = true
    }

}

extension ListPlayListViewController: UITableViewDataSource, UITableViewDelegate {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return playlists.count + 1
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        if indexPath.row == playlists.count {
            guard let cell = tableView.dequeueReusableCell(withIdentifier: createPlaylistCellId, for: indexPath) as? CreatePlaylistCell else {
                presentAlertVC(target: self, title: "Error", message: "Error while render table", nil)
                return UITableViewCell()
            }
            return cell
        }
        guard let cell = tableView.dequeueReusableCell(withIdentifier: cellID, for: indexPath) as? PlayListCell else {
            presentAlertVC(target: self, title: "Error", message: "Error while render table", nil)
            return UITableViewCell()
        }
        let playlist = playlists[indexPath.row]
        var isSongInPlaylist = false
        let curSongID = AudioPlaying.ins.currentIDSong()
        if curSongID != nil {
            isSongInPlaylist = playlist.listSongIds.contains(curSongID!)
        }
        cell.configure(title: playlist.name!, isAdded: isSongInPlaylist)
        return cell
    }
    //MARK: Delegate
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        if indexPath.row == playlists.count {
            let alert = UIAlertController(title: "Create title", message: "Enter playlist name", preferredStyle: .alert)
            alert.addTextField { (textField) in
                textField.placeholder = "Title"
            }
            alert.addAction(UIAlertAction(title: "Cancel", style: .cancel, handler: nil))
            alert.addAction(UIAlertAction(title: "OK", style: .default, handler: { [weak alert](_) in
                let textField = alert?.textFields![0]
                self.presenter?.addPlaylist(title: textField!.text!, { (error) in
                    guard error == nil else {
                        presentAlertVC(target: self, title: "Error", message: error!.localizedDescription, nil)
                        return
                    }
                    self.presenter?.loadPlaylists({ (playlists, error) in
                        self.playlists = playlists!
                        self.playListTableView.reloadData()
                    })
                })
            }))
            present(alert, animated: true, completion: nil)
            return
        }
        
        let cell = tableView.cellForRow(at: indexPath) as? PlayListCell
        cell!.isUserInteractionEnabled = false
        let isChecked = cell?.isCheck
        presenter?.playlistTouched(idSong: customSong ? songId : nil, playlistId: playlists[indexPath.row].id!, isChecked: isChecked!, { (error) in
            tableView.cellForRow(at: indexPath)?.isUserInteractionEnabled = true
            guard error == nil else {
                presentAlertVC(target: self, title: "Error", message: error!.localizedDescription, nil)
                return
            }
            cell?.isCheck = !cell!.isCheck
            self.presenter?.loadPlaylists({ (playlists, error) in
                guard error == nil else  {
                    presentAlertVC(target: self, title: "Error", message: error?.localizedDescription ?? "Unknown error", nil)
                    return
                }
                self.playlists = playlists ?? []
                self.playListTableView.reloadRows(at: [indexPath], with: .automatic)
            })
            self.customSong = false
        })
    }
    func tableView(_ tableView: UITableView, canEditRowAt indexPath: IndexPath) -> Bool {
        return indexPath.row == playlists.count ? false : true
    }
    func tableView(_ tableView: UITableView, commit editingStyle: UITableViewCell.EditingStyle, forRowAt indexPath: IndexPath) {
        if editingStyle == UITableViewCell.EditingStyle.delete {
            guard let idPlaylistRemove = playlists[indexPath.row].id else { return }
            playlists.remove(at: indexPath.row)
            playListTableView.deleteRows(at: [indexPath], with: .automatic)
            presenter?.removePlaylist(id: idPlaylistRemove, { (error) in
                presentAlertVC(target: self, title: "Error", message: error!.localizedDescription, nil)
            })
        }
    }
}
