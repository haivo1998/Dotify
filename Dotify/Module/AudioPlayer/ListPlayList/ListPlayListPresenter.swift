//
//  ListPlayListPresenter.swift
//  Dotify
//
//  Created Lucas Pham on 7/19/19.
//  Copyright © 2019 Vinova. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit

class ListPlayListPresenter: ListPlayListPresenterProtocol {

    weak private var view: ListPlayListViewProtocol?
    var interactor: ListPlayListInteractorProtocol?
    private let router: ListPlayListWireframeProtocol

    func loadPlaylists(_ completion: @escaping ([Playlist]?, Error?) -> Void ) {
        guard let userID = UserDefaults.standard.string(forKey: "user_id") else {
            return
        }
        interactor?.loadPlaylist(of: userID, { (playlists, error) in  //load all playlist of userID
            guard error == nil else { completion( nil, error); return; }
            guard var playlists = playlists else { return }
            let myGroup = DispatchGroup()
            for index in 0..<playlists.count { // Duyet qua tung playlist de lay listSongID
                myGroup.enter()
                self.interactor?.loadSongIds(of: playlists[index].id!, { (songIDs, error) in
                    guard error == nil else { return }
                    playlists[index].listSongIds = songIDs ?? []
                    myGroup.leave()
                })
            }
            myGroup.notify(queue: .main, execute: {
                playlists.sort(by: { (a, b) -> Bool in
                    return convertStrToDate(a.dateCreatedString!)! > convertStrToDate(b.dateCreatedString!)!
                })
                completion(playlists, nil)
            })
        })
    }
    func removePlaylist(id: String, _ completion: @escaping (Error?) -> Void ){
        PlaylistFirebase.instance.removePlaylist(id: id) { (error, ref) in
            completion(error)
        }
    }
    func playlistTouched(idSong: String?, playlistId: String, isChecked: Bool, _ completion: @escaping (Error?) -> Void) {
        let curSongId = idSong == nil ? AudioPlaying.ins.currentIDSong()! : idSong
        if isChecked{
            interactor?.removeSongFromPlaylist(songId: curSongId!, playlistId: playlistId, { (error, key) in
                completion(error)
            })
        } else {
            interactor?.addSongToPlaylist(songId: curSongId!, playlistId: playlistId, { (error, key) in
                completion(error)
            })
        }
    }
    
    func addPlaylist(title: String, _ completion: @escaping (Error?) -> Void ) {
        interactor?.addPlaylist(title: title, { (error) in
            completion(error)
        })
    }
    
    init(interface: ListPlayListViewProtocol, interactor: ListPlayListInteractorProtocol?, router: ListPlayListWireframeProtocol) {
        self.view = interface
        self.interactor = interactor
        self.router = router
    }
}
