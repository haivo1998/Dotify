//
//  SearchInteractor.swift
//  Dotify
//
//  Created Lucas Pham on 7/24/19.
//  Copyright © 2019 Vinova. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit
import Alamofire

class SearchInteractor: SearchInteractorProtocol {

    weak var presenter: SearchPresenterProtocol?
    func loadAllSong(_ completion: @escaping ([Song]? , Error?) -> Void ) {
        var songs: [Song] = []
        AF.request(SongDataURL.instance.getAllSongJson()).responseJSON { (response) in
            guard response.error == nil else { completion(nil, response.error); return }
            let data = response.value as! [String: Any]
            data.forEach({ (id, value) in
                let songDict = value as! [String: Any]
                let song = Song.init(JSON: songDict)
                song?.id = id
                songs += song != nil ? [song!] : []
            })
            completion(songs, nil)
        }
    }
    func loadAllArtist(_ completion: @escaping ([Artist]? , Error?) -> Void ) {
        var artists: [Artist] = []
        AF.request(ArtistDataURL.instance.getAllArtistJson() ).responseJSON { (response) in
            guard response.error == nil else { completion(nil, response.error); return }
            let data = response.value as! [String: Any]
            data.forEach({ (id, value) in
                let artistDict = value as! [String: Any]
                let artist = Artist.init(JSON: artistDict)
                artist?.id = id
                artists += artist != nil ? [artist!] : []
            })
            completion(artists, nil)
        }
    }
    func loadAllAlbum(_ completion: @escaping ([Album]? , Error?) -> Void ) {
        var albums: [Album] = []
        AF.request(AlbumDataURL.instance.getAllAlbumJson()).responseJSON { (response) in
            guard response.error == nil else { completion(nil, response.error); return }
            let data = response.value as! [String: Any]
            data.forEach({ (id, value) in
                let albumDict = value as! [String: Any]
                let album = Album.init(JSON: albumDict)
                album?.id = id
                albums += album != nil ? [album!] : []
            })
            completion(albums, nil)
        }
    }
    func loadAllPlaylist(_ completion: @escaping ([Playlist]? , Error?) -> Void ) {
        var playlists: [Playlist] = []
        AF.request(PlaylistDataURL.instance.getAllPlaylistJson() ).responseJSON { (response) in
            guard response.error == nil else { completion(nil, response.error); return }
            let data = response.value as! [String: Any]
            data.forEach({ (id, value) in
                let playlistDict = value as! [String: Any]
                let playlist = Playlist.init(JSON: playlistDict)
                playlist?.id = id
                playlists += playlist != nil ? [playlist!] : []
            })
            completion(playlists, nil)
        }
    }
}
