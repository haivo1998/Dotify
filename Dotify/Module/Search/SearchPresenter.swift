//
//  SearchPresenter.swift
//  Dotify
//
//  Created Lucas Pham on 7/24/19.
//  Copyright © 2019 Vinova. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit

class SearchPresenter: SearchPresenterProtocol {
    

    weak private var view: SearchViewProtocol?
    var interactor: SearchInteractorProtocol?
    private let router: SearchWireframeProtocol

    func searchTitle(_ title: String, _ completionSong: @escaping ([Song], Error?) -> Void, _ completionArtist: @escaping ([Artist], Error?) -> Void, _ completionAlbum: @escaping ([Album], Error?) -> Void, _ completionPlaylist: @escaping ([Playlist], Error?) -> Void) {
        interactor?.loadAllSong({ (songs, error) in
            guard error == nil else { completionSong([], nil); return; }
            var _songs: [Song] = songs ?? []
            //remove unmatch song
            var indexToRemove: [Int] = []
            for i in (0..<_songs.count).reversed() {
                indexToRemove += self.compareStrToStr(title, _songs[i].name!).0 == 0 ? [i] : []
            }
            indexToRemove.forEach({ _songs.remove(at: $0) })
            
            _songs.sort(by: { (a, b) -> Bool in
                let aResult = self.compareStrToStr(title, a.name!)
                let bResult = self.compareStrToStr(title, b.name!)
                return aResult.0 != bResult.0 ? aResult.0 > bResult.0 : aResult.1 < bResult.1
            })
            completionSong(_songs, error)
        })
        interactor?.loadAllArtist({ (artists, error) in
            guard error == nil else { completionArtist([], nil); return; }
            var _artists: [Artist] = artists ?? []
            //remove unmatch
            var indexToRemove: [Int] = []
            for i in (0..<_artists.count).reversed() {
                indexToRemove += self.compareStrToStr(title, _artists[i].name!).0 == 0 ? [i] : []
            }
            indexToRemove.forEach({ _artists.remove(at: $0) })
            
            _artists.sort(by: { (a, b) -> Bool in
                let aResult = self.compareStrToStr(title, a.name!)
                let bResult = self.compareStrToStr(title, b.name!)
                return aResult.0 != bResult.0 ? aResult.0 > bResult.0 : aResult.1 < bResult.1
            })
            completionArtist(_artists, error)
        })
        interactor?.loadAllAlbum({ (albums, error) in
            guard error == nil else { completionPlaylist([], nil); return; }
            var _albums: [Album] = albums ?? []
            var indexToRemove: [Int] = []
            for i in (0..<_albums.count).reversed() {
                indexToRemove += self.compareStrToStr(title, _albums[i].name!).0 == 0 ? [i] : []
            }
            indexToRemove.forEach({ _albums.remove(at: $0) })
            
            _albums.sort(by: { (a, b) -> Bool in
                let aResult = self.compareStrToStr(title, a.name!)
                let bResult = self.compareStrToStr(title, b.name!)
                return aResult.0 != bResult.0 ? aResult.0 > bResult.0 : aResult.1 < bResult.1
            })
            completionAlbum(_albums, error)
        })
        interactor?.loadAllPlaylist({ (playlists, error) in
            guard error == nil else { completionPlaylist([], nil); return; }
            var _playlists: [Playlist] = playlists ?? []
            var indexToRemove: [Int] = []
            for i in (0..<_playlists.count).reversed() {
                indexToRemove += self.compareStrToStr(title, _playlists[i].name!).0 == 0 ? [i] : []
            }
            indexToRemove.forEach({ _playlists.remove(at: $0) })
            
            _playlists.sort(by: { (a, b) -> Bool in
                let aResult = self.compareStrToStr(title, a.name!)
                let bResult = self.compareStrToStr(title, b.name!)
                return aResult.0 != bResult.0 ? aResult.0 > bResult.0 : aResult.1 < bResult.1
            })
            completionPlaylist(_playlists, error)
        })
    }
    
    func compareStrToStr(_ strToBeSearch : String, _ str: String) -> (Int, Int) {
        let listStrToBeSearch = strToBeSearch.lowercased().split(separator: " ")
        let listStr = str.lowercased().split(separator: " ")
        
        let diff = listStrToBeSearch.difference(from: listStr).count
        
        var same = 0
        listStrToBeSearch.forEach { (sub1) in
            listStr.forEach({ (sub2) in
                same += sub1 == sub2 ? 1 : 0
            })
        }
        
        return (same, diff)
    }
    
    init(interface: SearchViewProtocol, interactor: SearchInteractorProtocol?, router: SearchWireframeProtocol) {
        self.view = interface
        self.interactor = interactor
        self.router = router
    }

}
