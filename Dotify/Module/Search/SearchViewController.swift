//
//  SearchViewController.swift
//  Dotify
//
//  Created Lucas Pham on 7/24/19.
//  Copyright © 2019 Vinova. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit

class SearchViewController: UIViewController, UISearchResultsUpdating, SearchViewProtocol {
    //MARK: Outlet
    @IBOutlet weak var searchTableView: UITableView!
    
    var parentVC: MiniPlayerViewController?
    var section = ["Song", "Artist","Album","Playlist"]
    var songs: [Song] = []
    var artists: [Artist] = []
    var playlists: [Playlist] = []
    var albums: [Album] = []
    let cellID: String = "SearchResultCell"
	var presenter: SearchPresenterProtocol?

    let searchController = UISearchController(searchResultsController: nil)
    
    override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view.
        setUpNavBar()
        searchTableView.dataSource = self
        searchTableView.delegate = self
        
        let nibCellFile = UINib(nibName: "SearchResultCell", bundle: nil)
        searchTableView.register(nibCellFile, forCellReuseIdentifier: cellID)
    }
    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)
        searchController.searchResultsUpdater = self
        searchController.obscuresBackgroundDuringPresentation = false
        searchController.searchBar.placeholder = "Ask me anything"
        searchController.searchBar.delegate = self
        if #available(iOS 11.0, *) {
            navigationItem.searchController = searchController
        } else {
            // Fallback on earlier versions
        }
        definesPresentationContext = true
        searchController.searchBar.becomeFirstResponder()
        searchController.isActive = true
        
    }
    
    func setUpNavBar() {
        let searchBar = searchController.searchBar
        searchBar.sizeToFit()
        searchBar.searchBarStyle = .minimal
        searchBar.placeholder = "Search by username"
        searchBar.tintColor = UIColor.lightGray
        searchBar.barTintColor = UIColor.lightGray
        navigationItem.titleView = searchBar
        searchBar.isTranslucent = true
    }
    func updateSearchResults(for searchController: UISearchController) {
        let text = searchController.searchBar.text ?? ""
        if text.isEmpty { return }
        presenter?.searchTitle(text, { (songs, error) in
            self.songs = songs
            self.searchTableView.reloadData()
        }, { (artists, error) in
            self.artists = artists
            self.searchTableView.reloadData()
        }, { (albums, error) in
            self.albums = albums
            self.searchTableView.reloadData()
        }, { (playlists, error) in
            self.playlists = playlists
            self.searchTableView.reloadData()
        })
    }
}

extension SearchViewController: UITableViewDataSource, UITableViewDelegate {
    func numberOfSections(in tableView: UITableView) -> Int {
        return section.count
    }
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        switch section {
        case 0:
            return songs.count
        case 1:
            return artists.count
        case 2:
            return albums.count
        case 3:
            return playlists.count
        default:
            return 0
        }
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        guard let cell = tableView.dequeueReusableCell(withIdentifier: cellID, for: indexPath) as? SearchResultCell else { return UITableViewCell() }
        
        var title: String?, imageUrl: String?
        
        switch indexPath.section {
        case 0:
            let song = songs[indexPath.row]
            title = song.name
            imageUrl = song.imageUrl
        case 1:
            let artist = artists[indexPath.row]
            title = artist.name
            imageUrl = artist.imageUrl
        case 2:
            let album = albums[indexPath.row]
            title = album.name
            imageUrl = album.imageUrl
        case 3:
            let playlist = playlists[indexPath.row]
            title = playlist.name
            imageUrl = playlist.imageUrl
        default: break
        }
        cell.setUpView(title: title, imageUrl: imageUrl)
        return cell
    }
    func tableView(_ tableView: UITableView, viewForHeaderInSection section: Int) -> UIView? {
        let view = SectionView()
        view.setTitle(self.section[section])
        view.frame = CGRect(x: 0, y: 0, width: self.view.frame.width, height: 50)
        return view
    }
    func tableView(_ tableView: UITableView, heightForHeaderInSection section: Int) -> CGFloat {
        return 30
    }
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
//        DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
        
//        }
//        searchController.isActive = false
        navigationController?.dismiss(animated: false, completion: nil)
        DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
            if indexPath.section == 0 { //Song
                let listID = [self.songs[indexPath.row].id!]
                self.parentVC?.didTapMusic(listID: listID, index: 0)
            } else {
                let vc: UIViewController?
                switch indexPath.section {
                case 1:
                    let artistVC = ArtistScreen()
                    artistVC.currentArtistId = self.artists[indexPath.row].id!
                    artistVC.parentVC = self.parentVC
                    vc = artistVC
                case 2:
                    let albumVC = AlbumScreen()
                    albumVC.currentAlbumId = self.albums[indexPath.row].id!
                    albumVC.parentVC = self.parentVC
                    vc = albumVC
                case 3:
                    let playlistVC = PlaylistDetailRouter.createModule()
                    playlistVC.playlistID = self.playlists[indexPath.row].id!
                    playlistVC.parentVC = self.parentVC
                    vc = playlistVC
                default:
                    return
                }
                let navVC = self.parentVC?.rootViewController as! UINavigationController
                let curVC = navVC.visibleViewController
                curVC?.navigationController?.pushViewController(vc!, animated: true)
            }
        }
    }
}

extension SearchViewController: UISearchBarDelegate {
    func searchBarCancelButtonClicked(_ searchBar: UISearchBar) {
        navigationController?.dismiss(animated: false, completion: nil)
    }
}
