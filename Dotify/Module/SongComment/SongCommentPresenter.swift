//
//  SongCommentPresenter.swift
//  Dotify
//
//  Created Pham Thanh Phat on 7/28/19.
//  Copyright © 2019 Vinova. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit

class SongCommentPresenter: SongCommentPresenterProtocol {

    weak private var view: SongCommentViewProtocol?
    var interactor: SongCommentInteractorProtocol?
    private let router: SongCommentWireframeProtocol
    
    func loadAllComment(songId: String, _ completion: @escaping ([Comment], Error?) -> Void ) {
        interactor?.loadComments(of: songId, { (_comments, error) in
            guard error == nil else { completion([], error); return }
            var comments = _comments
            let myGroup = DispatchGroup()
            for index in 0..<comments.count {
                myGroup.enter()
                
                self.interactor?.loadUser(with: comments[index].userId!, { (user, error) in
                    guard error == nil else { completion(comments, error!); return }
                    comments[index].user = user!
                    myGroup.leave()
                })
            }
            myGroup.notify(queue: .main, execute: {
                comments.sort(by: { (a, b) -> Bool in
                    return convertStrToDate(a.dateStr!)! > convertStrToDate(b.dateStr!)!
                })
                completion(comments, nil)
            })
        })
    }
    func sendComment(songId: String, content: String, _ completion: @escaping (Error?) -> Void) {
        guard let userId = UserDefaults.standard.string(forKey: "user_id") else { return }
        interactor?.addComment(userId: userId, songId: songId, content: content, { (error) in
            completion(error)
        })
    }
    init(interface: SongCommentViewProtocol, interactor: SongCommentInteractorProtocol?, router: SongCommentWireframeProtocol) {
        self.view = interface
        self.interactor = interactor
        self.router = router
    }

}
