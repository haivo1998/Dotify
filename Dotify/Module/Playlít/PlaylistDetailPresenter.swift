//
//  PlaylistDetailPresenter.swift
//  Dotify
//
//  Created Lucas Pham on 7/29/19.
//  Copyright © 2019 Vinova. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit

class PlaylistDetailPresenter: PlaylistDetailPresenterProtocol {

    weak private var view: PlaylistDetailViewProtocol?
    var interactor: PlaylistDetailInteractorProtocol?
    private let router: PlaylistDetailWireframeProtocol

    func checkIfFavorite(userId: String, playlistId: String ,_ completion: @escaping (Bool, Error?) -> Void ){
        PlaylistFirebase.instance.loadRel(userId: userId, playlistId: playlistId) { (rel, error) in
            completion(rel != nil, error)
        }
    }
    func markFav(userId: String, playlistId: String, _ completion: @escaping (Error?) -> Void) {
        PlaylistFirebase.instance.addRel(userId: userId, playlistId: playlistId) { (error, ref) in
            completion(error)
        }
    }
    func removeFav(userId: String, playlistId: String, _ completion: @escaping (Error?) -> Void) {
        PlaylistFirebase.instance.removeRel(userId: userId, playlistId: playlistId) { (error, ref) in
            completion(error)
        }
    }
    func loadUser(with id: String, _ completion: @escaping (User?, Error?) -> Void) {
        let interactor = SongCommentInteractor()
        interactor.loadUser(with: id) { (user, error) in
            completion(user, error)
        }
    }
    func loadAllSong(of playlistId: String, _ completion: @escaping ([RelPlaylistSong], Error?) -> Void) {
        
        interactor?.loadRelPlaylistSong(of: playlistId, { (_rels, error) in
            guard error == nil else { completion([], error!); return }
            var rels = _rels
            rels.sort(by: { (a, b) -> Bool in
                return a.dateAdded! < b.dateAdded!
            })
            let songInteractor = MiniPlayerInteractor()
            let myGroup = DispatchGroup()
            for index in 0..<rels.count {
                myGroup.enter()
                songInteractor.loadSong(id: rels[index].songId!, { (song, error) in
                    guard error == nil else { completion([], error); return }
                    rels[index].song = song
                    myGroup.leave()
                })
            }
            myGroup.notify(queue: .main, execute: {
                completion(rels, nil)
            })
        })
    }
    func loadPlaylist(id: String, _ completion: @escaping (Playlist, Error?) -> Void ){
        interactor?.loadPlaylist(id: id, { (playlist, error) in
            guard error == nil else { completion(Playlist(), error!); return }
            completion(playlist, error)
        })
    }
    func removeSongFromPlaylist(songId: String, playlistId: String, _ completion: @escaping (Error?) -> Void){
        PlaylistFirebase.instance.removeSongFromPlaylist(songID: songId, playlistID: playlistId) { (error, ref) in
            completion(error)
        }
    }
    init(interface: PlaylistDetailViewProtocol, interactor: PlaylistDetailInteractorProtocol?, router: PlaylistDetailWireframeProtocol) {
        self.view = interface
        self.interactor = interactor
        self.router = router
    }

}
