//
//  PlaylistDetailViewController.swift
//  Dotify
//
//  Created Lucas Pham on 7/29/19.
//  Copyright © 2019 Vinova. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit
import SDWebImage
import FirebaseDatabase

class PlaylistDetailViewController: UIViewController, PlaylistDetailViewProtocol {
    @IBOutlet weak var titleLabel: UILabel!
    @IBOutlet weak var ownerLabel: UILabel!
    @IBOutlet weak var songTableView: UITableView!
    @IBOutlet weak var thumbImageView: UIImageView!
    @IBOutlet weak var favButton: UIButton!
    
    
    var parentVC: MiniPlayerViewController?
	var presenter: PlaylistDetailPresenterProtocol?
    let cellId = "SearchResultCell"
    var playlistID = "0"
    var playlist: Playlist?
    var rels: [RelPlaylistSong] = []
    var isMarkFav: Bool = false {
        didSet{
            favButton.setImage(self.isMarkFav ? #imageLiteral(resourceName: "favorite_song_btn") : #imageLiteral(resourceName: "favorite"), for: .normal)
        }
    }
    
	override func viewDidLoad() {
        super.viewDidLoad()
        songTableView.dataSource = self
        songTableView.delegate = self
//        songTableView.isEditing = true
        let nibFile = UINib(nibName: "SearchResultCell", bundle: nil)
        songTableView.register(nibFile, forCellReuseIdentifier: cellId)
        
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        self.navigationController?.navigationBar.isHidden = true
        
        presenter?.loadPlaylist(id: playlistID, { (playlist, error) in
            self.playlist = playlist
            self.setUpView(playlist: playlist)
            self.presenter?.loadUser(with: playlist.userId!, { (user, error) in
                guard error == nil else { presentAlertVC(target: self, title: "Error", message: error!.localizedDescription, nil); return }
                self.ownerLabel.text = user?.username
                let curUserId = UserDefaults.standard.string(forKey: "user_id") ?? ""
                self.favButton.isHidden = playlist.userId == curUserId
                self.presenter?.checkIfFavorite(userId: curUserId, playlistId: self.playlistID, { (isCheck, error) in
                    self.isMarkFav = isCheck
                })
            })
        })
        
        presenter?.loadAllSong(of: playlistID, { (rels, error) in
            guard error == nil else { presentAlertVC(target: self, title: "Error", message: error!.localizedDescription, nil); return }
            self.rels = rels
            if rels.count > 0 {
                self.thumbImageView.sd_setImage(with: URL(string: rels[0].song!.imageUrl!), placeholderImage: #imageLiteral(resourceName: "library"))
            }
            self.songTableView.reloadData()
        })
    }
    func setUpView(playlist: Playlist) {
        titleLabel.text = playlist.name
    }
    @IBAction func didTapFav(_ sender: Any) {
        favButton.isEnabled = false
        let curUserId = UserDefaults.standard.string(forKey: "user_id") ?? ""
        if isMarkFav {
            presenter?.removeFav(userId: curUserId, playlistId: playlistID, { (error) in
                self.favButton.isEnabled = true
                self.isMarkFav = false
            })
        } else {
            presenter?.markFav(userId: curUserId, playlistId: playlistID, { (error) in
                self.favButton.isEnabled = true
                self.isMarkFav = true
            })
        }
    }
    @IBAction func didTapBackButton(_ sender: Any) {
        self.navigationController?.popViewController(animated: true)
    }
    
    
}

extension PlaylistDetailViewController: UITableViewDataSource, UITableViewDelegate {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return rels.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        guard let cell = tableView.dequeueReusableCell(withIdentifier: cellId, for: indexPath) as? SearchResultCell else {
            presentAlertVC(target: self, title: "Error", message: "Error while dequeue cell", nil)
            return UITableViewCell()
        }
        let data = rels[indexPath.row].song
        cell.setUpView(title: data!.name, imageUrl: data!.imageUrl)
        return cell
    }
    func tableView(_ tableView: UITableView, canEditRowAt indexPath: IndexPath) -> Bool {
        return playlist?.userId == UserDefaults.standard.string(forKey: "user_id") ? true : false
    }
    func tableView(_ tableView: UITableView, commit editingStyle: UITableViewCell.EditingStyle, forRowAt indexPath: IndexPath) {
        if editingStyle == .delete {
            let data = self.rels[indexPath.row].songId
            self.rels.remove(at: indexPath.row)
            songTableView.deleteRows(at: [indexPath], with: .left)
            presenter?.removeSongFromPlaylist(songId: data!, playlistId: self.playlistID, { (error) in
                guard error == nil else { presentAlertVC(target: self, title: "Error", message: error!.localizedDescription, nil); return }
            })
        }
    }
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        //generate list song id
        var listSongIds: [String] = []
        rels.forEach { (rel) in
            listSongIds += [rel.songId!]
        }
        parentVC?.didTapMusic(listID: listSongIds, index: indexPath.row)
    }
}
