//
//  SignUpViewController.swift
//  Dotify
//
//  Created Lucas Pham on 7/12/19.
//  Copyright © 2019 Vinova. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit
import AccountKit
import FBSDKShareKit

class SignUpViewController: UIViewController, SignUpViewProtocol, UIGestureRecognizerDelegate {

    //MARK: Outlet
    @IBOutlet weak var backgroundImageView: UIImageView!
    @IBOutlet weak var emailTextField: UITextField!
    @IBOutlet weak var usernameTextField: UITextField!
    @IBOutlet weak var passwordTextField: UITextField!
    @IBOutlet weak var dobTextField: UITextField!
    @IBOutlet weak var genderTextField: UITextField!
    
    let datePicker = UIDatePicker()
    let genderPicker = UIPickerView()
    let genderData = ["Male", "Female"]
	var presenter: SignUpPresenterProtocol?

	override func viewDidLoad() {
        super.viewDidLoad()
        self.navigationController?.interactivePopGestureRecognizer?.delegate = self
        
        let backgroundTapGes = UITapGestureRecognizer(target: self, action: #selector(dismisKeyboard))
        backgroundImageView.addGestureRecognizer(backgroundTapGes)
        
        genderPicker.delegate = self
        genderPicker.dataSource = self
        
        genderTextField.inputView = genderPicker
        let toolbar = UIToolbar()
        toolbar.sizeToFit()
        let spaceButton1 = UIBarButtonItem(barButtonSystemItem: .flexibleSpace, target: nil, action: nil)
        let spaceButton2 = UIBarButtonItem(barButtonSystemItem: .flexibleSpace, target: nil, action: nil)
        let doneButton = UIBarButtonItem(title: "Done", style: .done, target: self, action: #selector(cancelPicker))
        
        toolbar.setItems([spaceButton1, spaceButton2, doneButton], animated: true)
        genderTextField.inputAccessoryView = toolbar
    }
    override func viewWillAppear(_ animated: Bool) {
        setUpNavigationBar()
    }
    //MARK: Setup picker
    
    func showDatePicker(){
        datePicker.datePickerMode = .date
        let toolbar = UIToolbar()
        toolbar.sizeToFit()
        let doneButton = UIBarButtonItem(title: "Done", style: .done, target: self, action: #selector(doneDatePicker))
        let spaceButton = UIBarButtonItem(barButtonSystemItem: .flexibleSpace, target: nil, action: nil)
        let cancelButton = UIBarButtonItem(title: "Cancel", style: .plain, target: self, action: #selector(cancelPicker))
        
        toolbar.setItems([cancelButton, spaceButton, doneButton], animated: true)
        dobTextField.inputAccessoryView = toolbar
        dobTextField.inputView = datePicker
    }
    @objc func doneDatePicker(){
        let format = DateFormatter()
        format.dateFormat = "MM/dd/yyyy"
        dobTextField.text = format.string(from: datePicker.date)
        //        dobTextField.isUserInteractionEnabled = true
        self.view.endEditing(true)
    }
    @objc func cancelPicker(){
        //        dobTextField.isUserInteractionEnabled = true
        self.view.endEditing(true)
    }
    @objc func doneGenderPicker() {
        
    }
    //MARK: Set up view
    func setUpNavigationBar(){
        let navigationBar = self.navigationController?.navigationBar
        navigationBar!.isHidden = false
        
        //Center view
        let imageTitle = UIImageView(image: #imageLiteral(resourceName: "icon"))
        imageTitle.frame  = CGRect(x: 0, y: 0, width: 90, height: 30)
        imageTitle.widthAnchor.constraint(equalToConstant: 90).isActive = true
        imageTitle.heightAnchor.constraint(equalToConstant: 30).isActive = true
        
        //Left button
        let leftButton = UIBarButtonItem(image: #imageLiteral(resourceName: "Back Chevron").withRenderingMode(.alwaysOriginal), style: .plain, target: self, action: #selector(popVC))
        
        navigationItem.titleView = imageTitle
        navigationItem.leftBarButtonItem = leftButton
        
    }
    //MARK: Action
    
    @IBAction func didTapDob(_ sender: Any) {
        showDatePicker()
    }
    @IBAction func didTapGender(_ sender: UITextField ){
//        showGenderPicker()
        sender.text = "M"
    }
    @IBAction func didTapSignUp(_ sender: Any) {
        let username = usernameTextField.text
        let email = emailTextField.text
        let password = passwordTextField.text
        let dob = dobTextField.text
        let gender = genderTextField.text == "M" ? true : false
        
        let user = User(JSON: ["username": username!, "email": email!, "password": password!, "birthday": dob!, "male": gender])
        
        presenter?.signUp(user: user!, completion: { (isSuccess, error) in
            guard error == nil else { fatalError(error!.localizedDescription) }
            if isSuccess! {
                let alertVC = UIAlertController(title: "Alert", message: "You have registered successfully. Please log in", preferredStyle: .alert)
                alertVC.addAction(UIAlertAction(title: "Ok", style: .default, handler: { (alertAction) in
                    self.navigationController?.popViewController(animated: true)
                }))
                self.present(alertVC, animated: true, completion: nil)
            }
        })
    }
    //MARK: Check username and email
    func checkEmail(isTaken: Bool?, invalidFormat: Bool?) {
        var message = ""
        message = isTaken != nil ? (isTaken! ? SignUpError.emailHasTaken : message) : message
        message = invalidFormat != nil ? (invalidFormat! ? SignUpError.invalidEmail : message) : message
        
        if message.isEmpty { return }
        
        let alertVC = UIAlertController(title: "Sign up failed", message: message, preferredStyle: .alert)
        alertVC.addAction(UIAlertAction(title: "OK", style: .default, handler: nil))
        present(alertVC, animated: true, completion: nil)
    }
    
    func checkUsername(isTaken: Bool?, invalidFormat: Bool?) {
        var message = ""
        message = isTaken != nil ? (isTaken! ? SignUpError.usernameHasTaken : message) : message
        message = invalidFormat != nil ? (invalidFormat! ? SignUpError.invalidUsername : message) : message
        
        if message.isEmpty { return }
        
        let alertVC = UIAlertController(title: "Sign up failed", message: message, preferredStyle: .alert)
        alertVC.addAction(UIAlertAction(title: "OK", style: .default, handler: nil))
        present(alertVC, animated: true, completion: nil)
    }
    
    //MARK: Selector function
    @objc func popVC(){
        self.navigationController?.popViewController(animated: true)
    }
    @objc func dismisKeyboard(){
        view.endEditing(true)
    }
}

extension SignUpViewController: UIPickerViewDataSource, UIPickerViewDelegate {
    func numberOfComponents(in pickerView: UIPickerView) -> Int {
        return 1
    }
    
    func pickerView(_ pickerView: UIPickerView, numberOfRowsInComponent component: Int) -> Int {
        return genderData.count
    }
    
    func pickerView(_ pickerView: UIPickerView, titleForRow row: Int, forComponent component: Int) -> String? {
        return genderData[row]
    }
    func pickerView(_ pickerView: UIPickerView, didSelectRow row: Int, inComponent component: Int) {
        genderTextField.text = genderData[row] == "Male" ? "M" : "F"
    }
    
}
